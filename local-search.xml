<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nvim: Error While Loading Shared Libraries: /usr/lib/lua/5.1/lpeg.so: Cannot Open Shared Object File: No Such File or Directory</title>
    <link href="/posts/405d6517/"/>
    <url>/posts/405d6517/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>After running <code>paru</code>, we tried to  open <code>nvim</code> but got a error like this</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">nvim: error while loading shared libraries: /usr/lib/lua/5.1/lpeg.so: cannot open shared object file: No such file or directory<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Install <code>lua51-lpeg</code> to solve it:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S lua51-lpeg<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nvim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arch linux</tag>
      
      <tag>nvim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为 Arch 安装并配置 Bspwm 环境</title>
    <link href="/posts/d466bea3/"/>
    <url>/posts/d466bea3/</url>
    
    <content type="html"><![CDATA[<p>继安装好 Arch 后，我们来对它进行一些安装、配置，这里我选择 <a href="https://github.com/baskerville/bspwm">bspwm</a> 作为 WM。</p><span id="more"></span><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>我们这里使用 <a href="https://networkmanager.dev/">NetworkManager</a> 来连接网络连接。</p><div class="note note-warning">            <p>请确保没有其他网络服务在运行。</p>          </div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> --now NetworkManager <span class="hljs-comment"># 启动 NetworkManager</span><br>nmcli dev wifi list <span class="hljs-comment"># 显示附近的 Wi-Fi 网络</span><br>nmcli dev wifi connect <span class="hljs-string">&quot;Wi-Fi名（SSID）&quot;</span> password <span class="hljs-string">&quot;网络密码&quot;</span> <span class="hljs-comment"># 连接指定的无线网络</span><br></code></pre></td></tr></table></figure><p>然后我们可以 ping 一下测试是否连接成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ping www.bilibili.com<br></code></pre></td></tr></table></figure><h2 id="安装微码"><a href="#安装微码" class="headerlink" title="安装微码"></a>安装微码</h2><p>安装对应芯片的微码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S intel-ucode <span class="hljs-comment"># Intel</span><br>pacman -S amd-ucode <span class="hljs-comment"># AMD</span><br></code></pre></td></tr></table></figure><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>除了 root 用户外，我们再添加一个非 root 用户以日常使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd -m -G wheel -s /bin/fish myusername<br></code></pre></td></tr></table></figure><p>设置新用户密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">passwd myusername<br></code></pre></td></tr></table></figure><p>允许用户使用 sudo 命令：</p><ol><li>编辑 sudoers 文件 <code>vim /etc/sudoers</code></li><li>去掉 <code>#%wheel ALL=(ALL:ALL) ALL</code> 前面的注释</li></ol><h2 id="添加-pacman-源"><a href="#添加-pacman-源" class="headerlink" title="添加 pacman 源"></a>添加 pacman 源</h2><p>编辑 <code>/etc/pacman.conf</code> 文件:</p><ol><li>去掉文件末尾 <code>[multilib]</code> 一节中两行的注释，来开启 32 位库支持</li><li>在文档结尾加入以下内容来添加 archlinuxcn 源：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[archlinuxcn]<br>Server = https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/archlinuxcn/</span><span class="hljs-variable">$arch</span> <span class="hljs-comment"># 中国科学技术大学开源镜像站</span><br>Server = https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/archlinuxcn/</span><span class="hljs-variable">$arch</span> <span class="hljs-comment"># 清华大学开源软件镜像站</span><br>Server = https:<span class="hljs-regexp">//mi</span>rrors.hit.edu.cn<span class="hljs-regexp">/archlinuxcn/</span><span class="hljs-variable">$arch</span> <span class="hljs-comment"># 哈尔滨工业大学开源镜像站</span><br>Server = https:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/archlinuxcn/</span><span class="hljs-variable">$arch</span> <span class="hljs-comment"># 华为开源镜像站</span><br></code></pre></td></tr></table></figure></li></ol><p>然后运行 <code>pacman -Syyu</code></p><p>接下来就可以安装 AUR Helper 了，我选择的是paru：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S archlinuxcn-keyring<br>pacman -S paru<br></code></pre></td></tr></table></figure><h2 id="安装-bspwm"><a href="#安装-bspwm" class="headerlink" title="安装 bspwm"></a>安装 bspwm</h2><p>安装一些必要的包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S bspwm sxhkd xorg rofi lxdm feh polybar picom dunst firefox wezterm<br>paru -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra<br></code></pre></td></tr></table></figure><p>使用默认配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p ~/.config/sxhkd/ ~/.config/bspwm/<br><span class="hljs-built_in">cd</span> ~/.config<br><span class="hljs-built_in">cp</span> /usr/share/doc/bspwm/examples/bspwmrc bspwm/<br><span class="hljs-built_in">cp</span> /usr/share/doc/bspwm/examples/sxhkdrc sxhkd/<br></code></pre></td></tr></table></figure><p>然后可以修改 <code>sxhkdrc</code> 文件的一些快捷键，如终端等</p><p>启动显示管理器，然后重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl <span class="hljs-built_in">enable</span> lxdm<br>reboot<br></code></pre></td></tr></table></figure><p>然后在登陆界面的左下角 <code>Desktop</code> 选择 bspwm，登陆即可。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>安装 <code>xdg-user-dirs</code> 来快速生成一些常用目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S xdg-user-dirs<br>LC_ALL=C xdg-user-dirs-update --force<br></code></pre></td></tr></table></figure><p>安装 <code>clash</code> 联通世界</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S clash<br></code></pre></td></tr></table></figure><p>接下来的配置可以看<a href="https://xxiaoa.github.io/posts/44a995c1/">之前的文章</a>。</p><p>安装 <code>openssh</code> 生成 ssh key</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S openssh<br>git config --global user.name <span class="hljs-string">&quot;name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email&quot;</span><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;email&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p>然后把 <code>~/.ssh/id_rsa.pub</code> 的内容上传到 Github： <code>settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code></p><p>测试是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>接下来拉取 dotfiles 并使用 <a href="https://github.com/XXiaoA/xdm">xdm</a> 来快速管理，建立软连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S xdm<br>git <span class="hljs-built_in">clone</span> git@github.com:XXiaoA/dotfiles.git ~/<br><span class="hljs-built_in">cd</span> ~/dotfiles/<br>xdm s<br></code></pre></td></tr></table></figure><p>安装一些其他的常用软件和字体：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S ttf-maple-latest nerd-fonts-complete ttf-lxgw-wenkai<br>paru -S clang axel wget tmux btop starship zoxide pkgfile usbutils trash-cli rust rust-src keymapper ripgrep xclip node npm fd neovim-git python-pynvim unzip telegram-desktop-megumifox bat eza udisks2 udiskie git-delta clang fzf maim mpv simplescreenrecorder android-file-transfer<br></code></pre></td></tr></table></figure><p>开启 <code>keymapper</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl <span class="hljs-built_in">enable</span> --now keymapperd.service<br></code></pre></td></tr></table></figure><h2 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h2><p>更多可以查看这个<a href="https://arch.icekylin.online/guide/rookie/graphic-driver.html#archlinux-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8">网站</a></p><div class="note note-info">            <p>Fuck You, NVIDIA</p>          </div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel<br>sudo pacman -S nvidia nvidia-settings lib32-nvidia-utils<br>sudo mkinitcpio -P<br></code></pre></td></tr></table></figure><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>安装 <code>fcitx5</code> 输入法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki  fcitx5-material-color<br></code></pre></td></tr></table></figure><p>然后运行 <code>fcitx5-configtool</code> 进行添加配音输入法，配置外观，字体，云拼音等</p><h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><p>使用 <code>pulseaudio</code> 提供声音服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S alsa-utils pulseaudio pavucontrol<br></code></pre></td></tr></table></figure><h2 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h2><p>在 <code>/etc/lxdm/lxdm.conf</code> 文件中添加 <code>autologin=username</code>。其中的 username 改成对应的用户名。然后可以顺便添加 <code>numlock=1</code> 来开机启动 numlock</p><h2 id="Grub-Theme"><a href="#Grub-Theme" class="headerlink" title="Grub Theme"></a>Grub Theme</h2><p>在 <a href="https://www.gnome-look.org/browse?cat=109&amp;ord=rating">https://www.gnome-look.org/browse?cat=109&amp;ord=rating</a> 等网站寻找然后下载想要的主题。然后解压缩，把得到的主题文件夹复制到 <code>/boot/grub/themes/</code> 目录（如果没有就创建）。修改 <code>/etc/default/grub</code> 文件，把 <code>GRUB_THEME</code> 指向主题目录下的 <code>theme.txt</code> 文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">GRUB_THEME=&quot;/boot/grub/themes/darkmatter/theme.txt&quot;<br></code></pre></td></tr></table></figure><p>最后更新 grub.cfg 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="光标主题"><a href="#光标主题" class="headerlink" title="光标主题"></a>光标主题</h2><p>在 <a href="https://www.gnome-look.org/browse?cat=107&amp;ord=rating">https://www.gnome-look.org/browse?cat=107&amp;ord=rating</a> 下载主题。然后解压到 <code>~/.local/share/icons/</code> 或者 <code>~/.icons/</code> 目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> ~/.icons/<br>tar xvf foobar-cursor-theme.tar.gz -C ~/.icons/<br></code></pre></td></tr></table></figure><p>以及安装的主题可以用以下命令查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find /usr/share/icons ~/.local/share/icons ~/.icons -<span class="hljs-built_in">type</span> d -name <span class="hljs-string">&quot;cursors&quot;</span><br></code></pre></td></tr></table></figure><p>创建 <code>~/.icons/default/index.theme</code> 文件并添加以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[icon theme]<br>Inherits=cursor_theme_name<br></code></pre></td></tr></table></figure><p>然后创建 <code>~/.config/gtk-3.0/settings.ini</code> 文件并添加以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Settings]<br>gtk-cursor-theme-name=cursor_theme_name<br></code></pre></td></tr></table></figure><p>完成之后重启就应该生效了。如果只有在窗口生效那么在 <code>bspwmrc</code> 中添加 <code>xsetroot -cursor_name left_ptr</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://arch.icekylin.online/">https://arch.icekylin.online/</a><br><a href="https://zhuanlan.zhihu.com/p/568211941">https://zhuanlan.zhihu.com/p/568211941</a><br><a href="https://wiki.archlinux.org/">https://wiki.archlinux.org/</a><br><a href="https://github.com/baskerville/bspwm/issues/1231">https://github.com/baskerville/bspwm/issues/1231</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arch linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次安装 Arch Linux</title>
    <link href="/posts/45550377/"/>
    <url>/posts/45550377/</url>
    
    <content type="html"><![CDATA[<h2 id="制作-U-盘启动盘"><a href="#制作-U-盘启动盘" class="headerlink" title="制作 U 盘启动盘"></a>制作 U 盘启动盘</h2><p>推荐找个<strong>靠谱</strong>的 u 盘安装 <a href="https://www.ventoy.net/cn/index.html">ventoy</a>。</p><p>ISO 文件可去 <a href="https://archlinux.org/download/">Arch 官网</a> 下载, 一定要检验下载下来的文件的完整性, 如 sha256sums 等。 如果没问题，把 ISO 文件拷进 u 盘的数据分区即可。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>然后插着 u 盘启动电脑，按 f10 或 f12 进 BIOS 设置界面, 在设置里把引导模式改为 uefi only（或关掉 legacy、csm）。记得保存设置。然后进入 ventoy 菜单，选择刚刚的 ISO 文件。</p><h3 id="禁用-reflector-服务"><a href="#禁用-reflector-服务" class="headerlink" title="禁用 reflector 服务"></a>禁用 reflector 服务</h3><p>进入 Live 环境后，先禁用 reflector 服务，方便后续选择镜像。 运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop reflector.service<br></code></pre></td></tr></table></figure><p>可以检查一下是否成功禁用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl status reflector.service<br></code></pre></td></tr></table></figure><h3 id="验证引导模式"><a href="#验证引导模式" class="headerlink" title="验证引导模式"></a>验证引导模式</h3><p>用下列命令列出 efivars 目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure><p>如果命令结果显示了目录且没有报告错误，则系统以 UEFI 模式引导。 如果目录不存在，则系统可能以 BIOS 模式 (或 CSM 模式) 引导。</p><h3 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h3><p>通过以下代码连接网络。注意，Wifi 名不能为中文, 不然只能看到一堆方块, 当然也不能输入中文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">iwctl <span class="hljs-comment"># 进入交互式命令行</span><br>device list <span class="hljs-comment"># 列出无线网卡设备名，比如无线网卡看到叫 wlan0</span><br>station wlan0 scan <span class="hljs-comment"># 扫描网络</span><br>station wlan0 get-networks <span class="hljs-comment"># 列出所有 wifi 网络</span><br>station wlan0 connect wifi-name <span class="hljs-comment"># 进行连接，注意这里无法输入中文。回车后输入密码即可</span><br><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 连接成功后退出</span><br></code></pre></td></tr></table></figure><p>连接成功后可以 ping 一下检查网路连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ping www.baidu.com<br></code></pre></td></tr></table></figure><h3 id="更新系统时钟"><a href="#更新系统时钟" class="headerlink" title="更新系统时钟"></a>更新系统时钟</h3><p>在 Live 环境中 systemd-timesyncd 默认启用，建立互联网连接后，时间将自动同步。当然可以再手动同步并确认。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">timedatectl set-ntp <span class="hljs-literal">true</span> <span class="hljs-comment"># 将系统时间与网络时间进行同步</span><br>timedatectl status <span class="hljs-comment"># 检查服务状态</span><br></code></pre></td></tr></table></figure><h3 id="修改-Mirror"><a href="#修改-Mirror" class="headerlink" title="修改 Mirror"></a>修改 Mirror</h3><p>修改 <code>/etc/pacman.d/mirrorlist</code> 文件（使用 vim 等）。把 China 相关的源放在最上面，可以适当保留其他源，不需要的使用 <code>#</code> 注释掉即可。</p><h3 id="分区与格式化"><a href="#分区与格式化" class="headerlink" title="分区与格式化"></a>分区与格式化</h3><div class="note note-warning">            <p>以下操作具有风险性！！！</p>          </div><p>用 <code>cfdisk</code> 进行分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfdisk /dev/sda<br></code></pre></td></tr></table></figure><p>具体分区大小和类型如下，因为后续使用 <strong>Btrfs</strong> 文件系统，所以根目录和用户主目录实际在一个分区上。</p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>&#x2F;mnt&#x2F;boot&#x2F;efi</td><td>&#x2F;dev&#x2F;efi_system_partition</td><td>EFI System</td><td>至少 300 MiB</td></tr><tr><td>[SWAP]</td><td>&#x2F;dev&#x2F;swap_partition</td><td>Linux swap</td><td>大于等于内存</td></tr><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;root_partition</td><td>Linux filesystem</td><td>剩余空间</td></tr></tbody></table><p>操作完后记得写入。可以使用 <code>fdisk -l</code> 查看分区情况。<br></p><p>格式化 EFI 分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkfs.fat -F32 /dev/sda1<br></code></pre></td></tr></table></figure><p>格式化 swap 分区。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkswap /dev/sda2<br></code></pre></td></tr></table></figure><p>格式化 btrfs 分区。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkfs.btrfs -L XXiaoA_Arch /dev/sda3 <span class="hljs-comment"># -L 后是分区的 LABLE</span><br></code></pre></td></tr></table></figure><p>为了创建子卷，我们需要先将 Btrfs 分区挂载到 &#x2F;mnt 下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount -t btrfs -o compress=zstd /dev/sda3 /mnt<br></code></pre></td></tr></table></figure><blockquote><p>-t 选项后指定挂载分区文件系统类型<br>-o 选项后添加挂载参数： compress&#x3D;zstd —— 开启透明压缩</p></blockquote><p>创建两个 Btrfs 子卷，之后将分别挂载到 <code>/</code> 根目录和 <code>/home</code> 用户主目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">btrfs subvolume create /mnt/@ <span class="hljs-comment"># 创建 / 目录子卷</span><br>btrfs subvolume create /mnt/@home <span class="hljs-comment"># 创建 /home 目录子卷</span><br></code></pre></td></tr></table></figure><p>复查子卷情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">btrfs subvolume list -p /mnt<br></code></pre></td></tr></table></figure><p>子卷创建好后，我们需要将 <code>/mnt</code> 卸载掉，以挂载子卷：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">umount /mnt<br></code></pre></td></tr></table></figure><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>注意挂载的顺序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount -t btrfs -o subvol=/@,compress=zstd /dev/sda3 /mnt <span class="hljs-comment"># 挂载 / 目录</span><br><span class="hljs-built_in">mkdir</span> /mnt/home <span class="hljs-comment"># 创建 /home 目录</span><br>mount -t btrfs -o subvol=/@home,compress=zstd /dev/sda3 /mnt/home <span class="hljs-comment"># 挂载 /home 目录</span><br><span class="hljs-built_in">mkdir</span> -p /mnt/boot/efi <span class="hljs-comment"># 创建 /boot/efi 目录</span><br>mount /dev/sda1 /mnt/boot/efi <span class="hljs-comment"># 挂载 /boot/efi 目录</span><br>swapon /dev/sda2 <span class="hljs-comment"># 挂载交换分区</span><br></code></pre></td></tr></table></figure><p>可使用 <code>df -h</code> 和 <code>free -h</code> 复查挂载情况。</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>使用 <code>pacstrap</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacstrap -K /mnt base base-devel linux linux-firmware btrfs-progs<br>pacstrap -K /mnt dhcpcd networkmanager vim sudo fish<br></code></pre></td></tr></table></figure><h3 id="生成-fstab"><a href="#生成-fstab" class="headerlink" title="生成 fstab"></a>生成 fstab</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">genfstab -U /mnt &gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure><p>复查：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /mnt/etc/fstab<br></code></pre></td></tr></table></figure><h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p>chroot 到新安装的系统：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">arch-chroot /mnt<br></code></pre></td></tr></table></figure><h3 id="其他工作"><a href="#其他工作" class="headerlink" title="其他工作"></a>其他工作</h3><p>在 <code>/etc/hostname</code> 设置主机名（直接加入想取的主机名即可, 如 myarch）<br></p><p><code>/etc/hosts</code> 添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">127.0.0.1   localhost<br>::1         localhost<br>127.0.1.1   myarch.localdomainmyarch<br></code></pre></td></tr></table></figure><p>设置时区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><p>然后运行 hwclock 以生成 <code>/etc/adjtime</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hwclock --systohc<br></code></pre></td></tr></table></figure><p>本地化：</p><ol><li>编辑 <code>/etc/locale.gen</code>，去掉 <code>en_US.UTF-8 UTF-8</code> 以及 <code>zh_CN.UTF-8 UTF-8</code> 行前的注释符号（#）。</li><li>执行 <code>locale-gen</code> 以生成 locale 信息。</li><li>向 <code>/etc/locale.conf</code> 加入 <code>LANG=en_US.UTF-8</code>（注意，不要在此设置为中文）。</li></ol><p>为 root 用户设置密码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">passwd root<br></code></pre></td></tr></table></figure><h3 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S grub efibootmgr os-prober<br></code></pre></td></tr></table></figure><p>安装 GRUB 到 EFI 分区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH<br></code></pre></td></tr></table></figure><p>如果后续发现安装失败则尝试加入 <code>removable</code> 参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH --removable<br></code></pre></td></tr></table></figure><p>编辑 <code>/etc/default/grub</code> 文件：</p><ol><li>去掉 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 一行中的 <code>quiet</code> 参数</li><li>把 <code>loglevel</code> 的数值从 3 改成 5</li><li>加入 <code>nowatchdog</code> 参数</li></ol><p>生成配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>输入 <code>exit</code> 或按 <code>Ctrl+d</code> 退出 chroot 环境。然后 <code>umount -R /mnt</code> 手动卸载被挂载的分区。拔掉 u 盘重启即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://arch.icekylin.online/">https://arch.icekylin.online/</a></li><li><a href="https://wiki.archlinuxcn.org/zh-hans/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">https://wiki.archlinuxcn.org/zh-hans/安装指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arch linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的2022</title>
    <link href="/posts/82a368dd/"/>
    <url>/posts/82a368dd/</url>
    
    <content type="html"><![CDATA[<p>2022 是神奇的一年，这一年，我重拾了编程，经历了中考，最后在年末阳了一次等等……</p><span id="more"></span><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p>说来也神奇，初二的一年多里，我和编程可谓是 “风马牛，不相及” 。忘记了最初是因为什么，让我在忙碌的初三把这丢了一年多的编程重拾了起来。<br></p><p>既然要编程，那我肯定需要工具。那我用什么呢？虽说是我用，但可以供我选择的其实并不多。那时，家里并没有电脑，于是，我把 “罪恶” 的目光投向了 termux + <code>neovim</code> 。当然，这是十分痛苦的。后来，neovim 也成了我为数不多用过，却离不开的 editor&#x2F;IDE。（其实我根本没尝试过如 vscode 等其他 editor&#x2F;IDE。🤣）。</p><p>中考后，我有了第一台电脑。我先给它安装上了 Ubuntu，后来又加入了 Arch Linux 大军。</p><p>在这一年的时间里，我：</p><ul><li>学习了 lua，配置了一个我很满意的 nvim 配置。</li><li>写了自己第一个 nvim 插件 <a href="https://github.com/XXiaoA/ns-textobject.nvim">ns-textobject.nvim</a></li><li>学了一点 Rust, 写了一个练手的 Dotfiles Manager: <a href="https://github.com/XXiaoA/xdm">xdm</a>。因为对 Dotfiles Manager 的需求不高，现在也一直在用这个小工具管理我的点文件。</li><li>参加了学校的信息竞赛课，开始学习 cpp，成为了一名没有打过任何比赛的业余 OIer（或许都不算）。</li><li>git commit 方面，从一开始的全是 update 和 save，到现在变得更加规范。</li><li>提了第一个 issue, 解决了别人第一个 issue。</li><li>提（并被合并）了第一个 PR，合并了第一个别人的 PR。</li><li>Github 斩获 30+ stars⭐</li></ul><br><p>这里水一张 github 的热力图<br><img src="https://s2.loli.net/2023/01/09/7v6aBQ81W2Lufib.png" alt="Github"></p><h1 id="中考"><a href="#中考" class="headerlink" title="中考"></a>中考</h1><p>中考，许多人面对的第一个人生的转折点。<br></p><p>面对这个转折点，有的人超常发挥，有的人遗憾落榜。而我，两者都不是。我发挥得和平时的成绩差不多，进入了一个还不错的学校。不过我相信，每一种安排都有它的意义。</p><p>进入高中后，结交了许多好朋友。最满意的还是学校的食堂，是它，让我知道初中三年吃的都有多<strong>难吃</strong>。</p><h1 id="疫情放开"><a href="#疫情放开" class="headerlink" title="疫情放开"></a>疫情放开</h1><p>疫情防控三年，而放开只是一夜之间的事。我也不知道说什么了。<del>所以，谁来还我逝去的青春</del></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>新的一年，希望我能继续进步，继续做我热爱的事： code，并且有一个 repository 收获 100+ stars！<br></p><p>2022 已经过去，希望我在 2023 能够 <strong>码力UPUP</strong>，放下过去，珍惜现在，把握未来！</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Create an Auto-Save Script With Delay Feature</title>
    <link href="/posts/15210477/"/>
    <url>/posts/15210477/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Do you want to save your code before the destroying of the world? <br></p><span id="more"></span><p>You may say:” That’s easy, I have ability to create an autocmd of <code>TextChanged</code> event to save it”. But it’s too frequent sometimes. Therefore, I am going to tell you how to create a mini auto-save script with <code>delay</code> feature, which is useful.</p><h2 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h2><p>The main means to achieve the goal is to save the buffer after some events with <a href="https://neovim.io/doc/user/autocmd.html">autocmd</a> function and then start a timer. Before the timer ends, the script won’t save the buffer anymore. <br></p><p>What’s more, I hope each buffer use a different timer.</p><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><div class="note note-info">            <p>You’re able to run <code>help</code> command in neovim to check more details if necessary</p>          </div><p>In order to make coding easier, we will use the following variables in all code blocks.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> api = vim.api<br><span class="hljs-keyword">local</span> fn = vim.fn<br></code></pre></td></tr></table></figure><h3 id="Autocmd"><a href="#Autocmd" class="headerlink" title="Autocmd"></a>Autocmd</h3><p>First of all, let’s create a simple autocmd to save the buffer and show the hint for user after each <code>InsertLeave</code> and <code>TextChanged</code> event.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> autosave = api.nvim_create_augroup(<span class="hljs-string">&quot;autosave&quot;</span>, &#123; clear = <span class="hljs-literal">true</span> &#125;)<br>api.nvim_create_autocmd(&#123; <span class="hljs-string">&quot;InsertLeave&quot;</span>, <span class="hljs-string">&quot;TextChanged&quot;</span> &#125;, &#123;<br>    pattern = <span class="hljs-string">&quot;*&quot;</span>,<br>    group = autosave,<br>    callback = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(ctx)</span></span><br>        vim.cmd(<span class="hljs-string">&quot;silent w&quot;</span>)<br>        vim.notify(<span class="hljs-string">&quot;Saved at &quot;</span> .. <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>))<br>    <span class="hljs-keyword">end</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Delay"><a href="#Delay" class="headerlink" title="Delay"></a>Delay</h3><p>In this tutorial, we use <a href="https://neovim.io/doc/user/lua.html#vim.defer_fn()">vim.defer_fn</a> to do timer. And we use <a href="https://neovim.io/doc/user/api.html#nvim_buf_set_var()">nvim_buf_set_var</a> and <a href="https://neovim.io/doc/user/api.html#nvim_buf_get_var()">nvim_buf_get_var</a> to mark or get if a buffer is queued. If a buffer is queued, it cannot be saved. <br></p><p>Now, we should know if the buffer is queued. And the script only save the code when the buffer isn’t queued .So add the following codes into callback function.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- get the queued value of the buffer</span><br><span class="hljs-keyword">local</span> ok, queued = <span class="hljs-built_in">pcall</span>(api.nvim_buf_get_var, ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>)<br><span class="hljs-comment">-- if cannot get/set buffer variable, end the callback</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- only save the buffer if the buffer isn&#x27;t queued</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> queued <span class="hljs-keyword">then</span><br>    vim.cmd(<span class="hljs-string">&quot;silent w&quot;</span>)<br>    vim.notify(<span class="hljs-string">&quot;Saved at &quot;</span> .. <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>))<br>    <span class="hljs-comment">-- let the buffer queued after saving it</span><br>    api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><br><p>Then, we’re supposed to cancle the buffer’s queued status with timer. You may want to use the following code to do it after delay.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.defer_fn(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">if</span> api.nvim_buf_is_valid(ctx.buf) <span class="hljs-keyword">then</span><br>        api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>, delay)<br></code></pre></td></tr></table></figure><br><p>However, there is a big problem here. We aim at saving the code once at most every <code>delay</code>, but the fact is that, if we tigger the events many times, we will create many timers to set <code>autosave_queued</code> false. So, we need to create another variable to <code>block</code> the timer be like:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> block = api.nvim_buf_get_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> block <span class="hljs-keyword">then</span><br>    api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">true</span>)<br>    vim.defer_fn(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-comment">-- check if the buffer valid</span><br>        <span class="hljs-comment">-- because buffer may disappear after delay</span><br>        <span class="hljs-keyword">if</span> api.nvim_buf_is_valid(ctx.buf) <span class="hljs-keyword">then</span><br>            api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">false</span>)<br>            api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>, delay)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><p>At last, we ought to initialize the <code>autosave_queued</code> and <code>autosave_block</code> variable after entering a new buffer.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">api.nvim_create_autocmd(<span class="hljs-string">&quot;BufRead&quot;</span>, &#123;<br>    pattern = <span class="hljs-string">&quot;*&quot;</span>,<br>    group = autosave,<br>    callback = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(ctx)</span></span><br>        api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">false</span>)<br>        api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">end</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Full-Code"><a href="#Full-Code" class="headerlink" title="Full Code"></a>Full Code</h2><details><summary><font size="" color="red">Click to show the full code.</font></summary><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> api = vim.api<br><span class="hljs-keyword">local</span> fn = vim.fn<br><br><span class="hljs-keyword">local</span> delay = <span class="hljs-number">250</span> <span class="hljs-comment">-- ms</span><br><br><span class="hljs-keyword">local</span> autosave = api.nvim_create_augroup(<span class="hljs-string">&quot;autosave&quot;</span>, &#123; clear = <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-comment">-- Initialization</span><br>api.nvim_create_autocmd(<span class="hljs-string">&quot;BufRead&quot;</span>, &#123;<br>    pattern = <span class="hljs-string">&quot;*&quot;</span>,<br>    group = autosave,<br>    callback = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(ctx)</span></span><br>        api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">false</span>)<br>        api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">end</span>,<br>&#125;)<br><br>api.nvim_create_autocmd(&#123; <span class="hljs-string">&quot;InsertLeave&quot;</span>, <span class="hljs-string">&quot;TextChanged&quot;</span> &#125;, &#123;<br>    pattern = <span class="hljs-string">&quot;*&quot;</span>,<br>    group = autosave,<br>    callback = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(ctx)</span></span><br>        <span class="hljs-comment">-- conditions that donnot do autosave</span><br>        <span class="hljs-keyword">local</span> disabled_ft = &#123; <span class="hljs-string">&quot;acwrite&quot;</span>, <span class="hljs-string">&quot;oil&quot;</span> &#125;<br>        <span class="hljs-keyword">if</span><br>            <span class="hljs-keyword">not</span> vim.bo.modified<br>            <span class="hljs-keyword">or</span> fn.findfile(ctx.file, <span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">-- a new file</span><br>            <span class="hljs-keyword">or</span> ctx.file:<span class="hljs-built_in">match</span>(<span class="hljs-string">&quot;wezterm.lua&quot;</span>)<br>            <span class="hljs-keyword">or</span> vim.tbl_contains(disabled_ft, vim.bo[ctx.buf].ft)<br>        <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> ok, queued = <span class="hljs-built_in">pcall</span>(api.nvim_buf_get_var, ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> queued <span class="hljs-keyword">then</span><br>            vim.cmd(<span class="hljs-string">&quot;silent w&quot;</span>)<br>            api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">true</span>)<br>            vim.notify(<span class="hljs-string">&quot;Saved at &quot;</span> .. <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>))<br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> block = api.nvim_buf_get_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> block <span class="hljs-keyword">then</span><br>            api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">true</span>)<br>            vim.defer_fn(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>                <span class="hljs-keyword">if</span> api.nvim_buf_is_valid(ctx.buf) <span class="hljs-keyword">then</span><br>                    api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_queued&quot;</span>, <span class="hljs-literal">false</span>)<br>                    api.nvim_buf_set_var(ctx.buf, <span class="hljs-string">&quot;autosave_block&quot;</span>, <span class="hljs-literal">false</span>)<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span>, delay)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span>,<br>&#125;)<br></code></pre></td></tr></table></figure></details><h2 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h2><p>Now, an awesome auto-save script have been created, which is customizable. You can add other features into it such as some conditions to save, some callbacks before&#x2F;after saving( e.g. formatting ), etc. <br></p><p>And you can check <a href="https://github.com/XXiaoA/nvimrc/blob/d39c88f869713ea01181475fc6016a73c1478cdf/plugin/auto_save.lua">here</a> to see my script. <br></p><p>If you have any ideas or find some issues, feel free to comment below!</p>]]></content>
    
    
    <categories>
      
      <category>Nvim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Make Telegram Use User Fonts</title>
    <link href="/posts/b85da6b6/"/>
    <url>/posts/b85da6b6/</url>
    
    <content type="html"><![CDATA[<h2 id="Intsall"><a href="#Intsall" class="headerlink" title="Intsall"></a>Intsall</h2><p>First, you need to add <code>archlinuxcn</code> in <code>/etc/pacman.conf</code>:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs confini">[archlinuxcn]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch<br></code></pre></td></tr></table></figure><br><p>Then run <code>sudo pacman -Syyu &amp;&amp; yay -S telegram-desktop-megumifox</code></p><h2 id="Showcase"><a href="#Showcase" class="headerlink" title="Showcase"></a>Showcase</h2><p><img src="https://s2.loli.net/2022/09/10/g5uBxTRpmX4OHtG.png" alt="telegram-desktop"><br><img src="https://s2.loli.net/2022/09/10/m7P4KbkiLGQZuSU.png" alt="telegram-desktop-megumifox"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arch linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash 魔法教学</title>
    <link href="/posts/44a995c1/"/>
    <url>/posts/44a995c1/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Arch Linux 可以直接用包管理器安装：</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">paru -S clash<br></code></pre></td></tr></table></figure><p>也可以从官方的 <a href="https://github.com/Dreamacro/clash/releases">releases</a> 选择合适自己操作系统的压缩包。</p><p>然后解压，添加可执行权限，让后移动到 <code>$PATH</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip -f clash*.gz -d<br><span class="hljs-built_in">mv</span> clash* clash<br><span class="hljs-built_in">chmod</span> +x clash<br><span class="hljs-built_in">mv</span> clash /usr/bin/<br></code></pre></td></tr></table></figure><br><p>执行 <code>clash</code> 会默认在 <code>~/.config/clash/</code> 目录下生成 <code>config.yaml</code> 和 <code>Country.mmdb</code> 文件。前者是配置文件，如果后者下载失败可以手动下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;https://github.com/Dreamacro/maxmind-geoip/releases/latest/download/Country.mmdb&quot;</span> -o <span class="hljs-string">&quot;~/.config/clash/Country.mmdb&quot;</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>你可以自己根据 <a href="https://github.com/Dreamacro/clash/wiki/Configuration">官方wiki</a> 中学习如何配置文档。或者，你可以直接从你的机场那下载文件。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>如题，打开系统的网络设置，设置成如下<br><img src="https://s2.loli.net/2022/09/04/Xx7Tdak4m5W93JP.png" alt="settings.png"> <br></p><p>其中例外为：<code>localhost,127.0.0.0/8,::1</code>。<br></p><p>因为 clash 默认 http 端口默认监听是 7890 , socks5 端口默认监听是 7891。当然，你也可以像这样在 config.yaml 里这样自己设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">7890</span><br><span class="hljs-attr">socks-port:</span> <span class="hljs-number">7891</span><br></code></pre></td></tr></table></figure><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>你需要设置环境变量在你的 shell 配置里，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-variable">$https_proxy</span><br></code></pre></td></tr></table></figure><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>firefox 的话打开网络设置，改成手动配置代理，具体配置和前面的系统配置差不多。</p><h3 id="telegram"><a href="#telegram" class="headerlink" title="telegram"></a>telegram</h3><p>打开设置，找到 <code>Advanced</code> -&gt; <code>Proxy settings</code>，改成 <code>use custom proxy</code>，添加一个 <code>127.0.0.1：7891</code></p><h2 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h2><p>Arch Linux 下创建文件 <code>/etc/systemd/system/clash.service</code>, 内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs systemd">[Unit]<br>Description=Clash daemon, A rule-based proxy in Go.<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=always<br>ExecStart=/usr/bin/clash -d /home/xxiaoa/.config/clash<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><br><p>重新加载systemd：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>在系统启动时运行 clash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> clash<br></code></pre></td></tr></table></figure><p>立即运行 clash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start clash<br></code></pre></td></tr></table></figure><p>检查 Clash 的运行状况和日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status clash<br>journalctl -xe<br></code></pre></td></tr></table></figure><h2 id="Web-管理"><a href="#Web-管理" class="headerlink" title="Web 管理"></a>Web 管理</h2><p>先把 <a href="https://github.com/Dreamacro/clash-dashboard/etc/clash/clash-dashboard">clash-dashboard</a> 克隆到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b gh-pages --depth 1 https://github.com/Dreamacro/clash-dashboard /home/xxiaoa/.config/clash/clash-dashboard<br></code></pre></td></tr></table></figure><br><p>然后记得在 clash 的配置里添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">external-controller:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:9090</span> <span class="hljs-comment"># 修改ip地址和端口；</span><br><span class="hljs-attr">external-ui:</span> <span class="hljs-string">/etc/clash/clash-dashboard</span> <span class="hljs-comment"># clash-dashboard的路径；</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><p>然后浏览器打开 <a href="localhost:9090/ui">localhost:9090/ui</a> 输入自己刚刚设置的密码就可以了。</p><p>或者如果觉得以上太麻烦可以直接使用在线版 <a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Read Yaml File in Rust</title>
    <link href="/posts/d42e5e77/"/>
    <url>/posts/d42e5e77/</url>
    
    <content type="html"><![CDATA[<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>add <code>yaml-rust = &quot;0.4&quot;</code> in your Cargo.toml or run <code>cargo add yaml-rust</code></p><span id="more"></span><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># file.yaml</span><br><span class="hljs-attr">clean:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~/.config</span><br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// main.rs</span><br><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">use</span> std::io::prelude::*;<br><span class="hljs-keyword">use</span> yaml_rust::YamlLoader;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file</span> = <span class="hljs-string">&quot;file.yaml&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">file</span> = File::<span class="hljs-title function_ invoke__">open</span>(file).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Unable to open file&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">contents</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>    file.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> contents)<br>        .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Unable to read file&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">docs</span> = YamlLoader::<span class="hljs-title function_ invoke__">load_from_str</span>(&amp;contents).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">yaml</span> = &amp;docs[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// println!(&quot;&#123;:#?&#125;&quot;, yaml);</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">clean</span> = yaml[<span class="hljs-string">&quot;clean&quot;</span>][<span class="hljs-number">0</span>].<span class="hljs-title function_ invoke__">as_str</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;clean&#125;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>result for cargo run:</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~/<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://yaml.org/">https://yaml.org/</a></li><li><a href="https://docs.rs/yaml-rust/latest/yaml_rust/">yaml_rust</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zoxide: String Match Unknown Option &#39;--Groups-Only&#39; on Fish</title>
    <link href="/posts/dffe87b4/"/>
    <url>/posts/dffe87b4/</url>
    
    <content type="html"><![CDATA[<p>When I use <a href="https://github.com/ajeetdsouza/zoxide">zoxide</a> in ubuntu 22.04 in fish shell, it threw errors like this <br></p><span id="more"></span><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">string match:Unknown option &#x27;--groups-only&#x27;<br>...<br></code></pre></td></tr></table></figure><h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>Because my fish shell version isn’t lastest in my sources. </p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Add PPA to use lastest fish.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-add-repository ppa:fish-shell/release-3<br>sudo apt update<br>sudo apt fish<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/ajeetdsouza/zoxide/issues/436">ajeetdsouza&#x2F;zoxide#436</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>fish shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美化 Gnome 桌面</title>
    <link href="/posts/8b4c36b/"/>
    <url>/posts/8b4c36b/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于 <code>Ubuntu 22.04 LTS</code></p><span id="more"></span><h2 id="Gnome-拓展"><a href="#Gnome-拓展" class="headerlink" title="Gnome 拓展"></a>Gnome 拓展</h2><p>安装 tweaks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install gnome-tweaks<br></code></pre></td></tr></table></figure><p>安装 gnome-shell-extensions</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install gnome-shell-extensions<br></code></pre></td></tr></table></figure><br><p>在浏览器拓展商场中安装 <code>GNOME shell 集成</code>, chrome 和 firefox 都支持。 <br></p><p>以 chrome 例，打开 <a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep">chrome 应用商场</a>。安装后就可以对扩展进行添加以及管理了。 <br></p><p>拓展可以自行去 <a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a> 寻找。以下是我安装的拓展<br><img src="https://s2.loli.net/2022/08/09/AqfdHmBzgbJwrS4.png"></p><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="User-Themes"><a href="#User-Themes" class="headerlink" title="User Themes"></a>User Themes</h3><p>首先，<strong>必须</strong>先启动 <a href="https://extensions.gnome.org/extension/19/user-themes/">User Themes</a>。如图，点击 off, 变成 on<br><img src="https://s2.loli.net/2022/08/09/dgsJylqRwEcn2M9.png"></p><h3 id="Ocs-url"><a href="#Ocs-url" class="headerlink" title="Ocs-url"></a>Ocs-url</h3><p>接下来安装 <code>ocs-url</code>。<br></p><p>打开 <a href="https://www.opendesktop.org/p/1136805/">https://www.opendesktop.org/p/1136805/</a>，安装对应的 <code>deb</code> 包。然后终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install libqt5svg5 qml-module-qtquick-controls<br>sudo dpkg -i ocs-url*.deb<br></code></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>打开 <a href="https://www.gnome-look.org/browse/">gnome-look</a> 选择自己喜欢的主题，使用 <code>OCS-install</code>，这样可以省去自己解压的步骤。<br></p><p>然后打开 <code>tweaks</code>。选择 <code>外观</code>，就可以切换自己使用的主题了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>打开设置，选择外观，可以调整 <code>Dock</code> 的位置</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>gnome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Action自动部署博客</title>
    <link href="/posts/2dd3bdb5/"/>
    <url>/posts/2dd3bdb5/</url>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>把 blog 源码放在一个仓库，之后只要 push 内容到该仓库，就用 <code>GitHub action</code> 自动构建博客，并把 <code>public</code> 目录下的内容推送到 <code>user.github.io</code> 仓库 <br></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>首先，在 GitHub 创建一个名为 <code>blog</code> 的仓库，用来放博客源码。当然也可以是其他名字。 <br></p><p><br>然后，在 <code>blog</code> 仓库下创建 <code>.github/workflows/gh-pages.yml</code> 文件。添加以下内容：</p><details><summary><font size="" color="red">Hugo</font></summary><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># Set a branch to deploy</span><br>  <span class="hljs-attr">pull_request:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>    <span class="hljs-attr">concurrency:</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.workflow</span> <span class="hljs-string">&#125;&#125;-$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Fetch Hugo themes (true OR recursive)</span><br>          <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span>    <span class="hljs-comment"># Fetch all history for .GitInfo and .Lastmod</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hugo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-hugo@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">hugo-version:</span> <span class="hljs-string">&#x27;0.101.0&#x27;</span><br>          <span class="hljs-attr">extended:</span> <span class="hljs-literal">true</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">hugo</span> <span class="hljs-string">--minify</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">external_repository:</span> <span class="hljs-string">XXiaoA/XXiaoA.github.io</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">main</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br>          <span class="hljs-attr">commit_message:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><br>此外，记得把 <code>external_repository</code> 改为自己仓库的名字 <br></p></details><details><summary><font size="" color="red">Hexo</font></summary><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">pull_request:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">A</span> <span class="hljs-string">job</span> <span class="hljs-string">to</span> <span class="hljs-string">deploy</span> <span class="hljs-string">blog.</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Checkout private submodules(themes or something else).</span><br>    <br>    <span class="hljs-comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">node</span> <span class="hljs-string">modules</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">cache</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">steps.cache.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>    <br>    <span class="hljs-comment"># Deploy hexo blog website.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">deploy</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">sma11black/hexo-action@v1.0.3</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">user_name:</span> <span class="hljs-string">your</span> <span class="hljs-string">github</span> <span class="hljs-string">username</span>  <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>        <span class="hljs-attr">user_email:</span> <span class="hljs-string">your</span> <span class="hljs-string">github</span> <span class="hljs-string">useremail</span>  <span class="hljs-comment"># (or delete this input setting to use bot account)</span><br>        <span class="hljs-attr">commit_msg:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;</span>  <span class="hljs-comment"># (or delete this input setting to use hexo default settings)</span><br>    <span class="hljs-comment"># Use the output from the `deploy` step(use for test action)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">output</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure></details><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>在终端运行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;<span class="hljs-subst">$(git config user.email)</span>&quot;</span> -f gh-pages -N <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><br>不出意外，会有两个文件生成：</p><ul><li><code>gh-pages.pub</code> 公钥</li><li><code>gh-pages</code> 私钥</li></ul><p><br>接着打开 GitHub 的 <code>blog</code> 仓库，点击 <code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>Actions</code> 添加你的私钥（也就是 gh-pages 文件的内容），命名为 <code>ACTIONS_DEPLOY_KEY</code> <br></p><p><br>然后点开 <code>user.github.io</code> 仓库。进入设置点击 <code>Deploy key</code> 把你的公钥添加进去。记得点击 <code>Allow write access</code> 选项。 <br></p><p><br>然后就大功告成了！🥳 <br></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/peaceiris/actions-hugo">peaceiris&#x2F;actions-hugo</a></li><li><a href="https://github.com/peaceiris/actions-gh-pages">peaceiris&#x2F;actions-gh-pages</a></li><li><a href="https://github.com/sma11black/hexo-action">sma11black&#x2F;hexo-action</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中考加油</title>
    <link href="/posts/db16e61e/"/>
    <url>/posts/db16e61e/</url>
    
    <content type="html"><![CDATA[<h1 id="会当凌绝顶，一览众山小"><a href="#会当凌绝顶，一览众山小" class="headerlink" title="会当凌绝顶，一览众山小 "></a>会当凌绝顶，一览众山小 <br></h1><h1 id="中考加油-✊"><a href="#中考加油-✊" class="headerlink" title="中考加油!✊"></a><font color="red">中考加油!✊</font></h1>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yt-Dlp: An Awesome Videos Downloader</title>
    <link href="/posts/3be913fe/"/>
    <url>/posts/3be913fe/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote><p>A youtube-dl fork with additional features and fixes</p></blockquote><span id="more"></span><p>It’s one of the best tools to download the video and etc. The following just some simple stuff of it. Therefore, go to <a href="https://github.com/yt-dlp/yt-dlp">GitHub</a> to see more! <br> </p><h2 id="Installation-Update"><a href="#Installation-Update" class="headerlink" title="Installation &amp; Update"></a>Installation &amp; Update</h2><h3 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h3><p>The following is a example for <code>pip</code>. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 -m pip install -U yt-dlp<br></code></pre></td></tr></table></figure><p>If you want to install some <strong>optional dependence</strong> for many  awesome features. Please click <a href="https://github.com/yt-dlp/yt-dlp#installation">the link</a> to see detailed information.<br></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>You’re able to run <code>yt-dlp -U</code> to update it. <br></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>The basic command is. <br><br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp [OPTIONS] [--] URL [URL...]<br></code></pre></td></tr></table></figure></p><p>For example: <br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Download the YouTube video</span><br>yt-dlp https://www.youtube.com/watch?v=NLNdoj_N_TY<br></code></pre></td></tr></table></figure><br><p>Print out the available formats and information with:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp --list-formats URL<br></code></pre></td></tr></table></figure><p>For example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp --list-formats https://m.youtube.com/watch?v=NLNdoj_N_TY<br></code></pre></td></tr></table></figure><br><p>Then, you will see the following information:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">[youtube] NLNdoj_N_TY: Downloading webpage<br>[youtube] NLNdoj_N_TY: Downloading android player API JSON<br>[info] Available formats <span class="hljs-keyword">for</span> NLNdoj_N_TY:<br>ID  EXT   RESOLUTION FPS |   FILESIZE  TBR PROTO | VCODEC         VBR ACODEC      ABR     ASR MORE INFO<br>---------------------------------------------------------------------------------------------------------------<br>sb2 mhtml 48x27          |                 mhtml | images                                     storyboard<br>sb1 mhtml 80x45          |                 mhtml | images                                     storyboard<br>sb0 mhtml 160x90         |                 mhtml | images                                     storyboard<br>139 m4a   audio only     |    1.89MiB  48k https | audio only         mp4a.40.5   48k 22050Hz low, m4a_dash<br>249 webm  audio only     |    2.10MiB  54k https | audio only         opus        54k 48000Hz low, webm_dash<br>250 webm  audio only     |    2.76MiB  71k https | audio only         opus        71k 48000Hz low, webm_dash<br>140 m4a   audio only     |    5.00MiB 129k https | audio only         mp4a.40.2  129k 44100Hz medium, m4a_dash<br>251 webm  audio only     |    5.29MiB 137k https | audio only         opus       137k 48000Hz medium, webm_dash<br>17  3gp   176x144      6 |    1.90MiB  49k https | mp4v.20.3      49k mp4a.40.2    0k 22050Hz 144p<br>394 mp4   256x144     25 |    2.14MiB  55k https | av01.0.00M.08  55k video only              144p, mp4_dash<br>160 mp4   256x144     25 |  763.00KiB  19k https | avc1.4d400c    19k video only              144p, mp4_dash<br>278 webm  256x144     25 |    1.51MiB  39k https | vp9            39k video only              144p, webm_dash<br>395 mp4   426x240     25 |    1.22MiB  31k https | av01.0.00M.08  31k video only              240p, mp4_dash<br>133 mp4   426x240     25 |    1.14MiB  29k https | avc1.4d4015    29k video only              240p, mp4_dash<br>242 webm  426x240     25 |    1.49MiB  38k https | vp9            38k video only              240p, webm_dash<br>396 mp4   640x360     25 |    2.04MiB  52k https | av01.0.01M.08  52k video only              360p, mp4_dash<br>134 mp4   640x360     25 |    1.84MiB  47k https | avc1.4d401e    47k video only              360p, mp4_dash<br>18  mp4   640x360     25 |   10.50MiB 271k https | avc1.42001E   271k mp4a.40.2    0k 44100Hz 360p<br>243 webm  640x360     25 |    2.05MiB  53k https | vp9            53k video only              360p, webm_dash<br>397 mp4   854x480     25 |    3.36MiB  86k https | av01.0.04M.08  86k video only              480p, mp4_dash<br>135 mp4   854x480     25 |    2.58MiB  66k https | avc1.4d401e    66k video only              480p, mp4_dash<br>244 webm  854x480     25 |    2.78MiB  72k https | vp9            72k video only              480p, webm_dash<br>22  mp4   1280x720    25 | ~  9.59MiB 242k https | avc1.64001F   242k mp4a.40.2    0k 44100Hz 720p<br>398 mp4   1280x720    25 |    6.29MiB 162k https | av01.0.05M.08 162k video only              720p, mp4_dash<br>136 mp4   1280x720    25 |    4.37MiB 113k https | avc1.4d401f   113k video only              720p, mp4_dash<br>247 webm  1280x720    25 |    4.66MiB 120k https | vp9           120k video only              720p, webm_dash<br>399 mp4   1920x1080   25 |   11.62MiB 300k https | av01.0.08M.08 300k video only              1080p, mp4_dash<br>137 mp4   1920x1080   25 |   14.25MiB 369k https | avc1.640028   369k video only              1080p, mp4_dash<br>248 webm  1920x1080   25 |   11.66MiB 301k https | vp9           301k video only              1080p, webm_dash<br></code></pre></td></tr></table></figure><p>As you can see, some is <strong>video only</strong> and some is <strong>audio only</strong>. </p><p>So you can run the following command to download only audio</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp -f 140 https://m.youtube.com/watch?v=NLNdoj_N_TY<br></code></pre></td></tr></table></figure><br><p>Or change the argument to choose what do you want to download, such as <code>137</code> to download only video, and <code>140+137</code> to download both video and audio.</p><br><p>Download and merge the best video stream with the best audio stream:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp -f <span class="hljs-string">&#x27;bv*+ba&#x27;</span> https://m.youtube.com/watch?v=H3o4l4GVLW0<br></code></pre></td></tr></table></figure><br><p>Download the video with subtitles</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yt-dlp --sub-langs en --embed-subs https://m.youtube.com/watch?v=H3o4l4GVLW0<br></code></pre></td></tr></table></figure><br><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You are able to put your argument of yt-dlp in a file. Please go to <a href="https://github.com/yt-dlp/yt-dlp#configuration">offical docs</a> for more. <br></p><p>At last, here is <a href="https://github.com/XXiaoA/dotfiles/blob/main/yt-dlp/yt-dlp.conf">my configuration</a>. Hope it’s helpful</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a></li><li><a href="https://write.corbpie.com/downloading-youtube-videos-and-playlists-with-yt-dlp/">Downloading YouTube videos and playlists with yt-dlp</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>youtube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Find the Create Date of GitHub Repo</title>
    <link href="/posts/8f5cfa8c/"/>
    <url>/posts/8f5cfa8c/</url>
    
    <content type="html"><![CDATA[<p>You can use the <a href="https://developer.github.com/v3/repos/#get">API from GitHub</a> to search it.</p><span id="more"></span><p>Like open the following link in the browser.<br><code>https://api.github.com/repos/&#123;:owner&#125;/&#123;:repository&#125;</code></p><div class="note note-info">            <p>Don’t forget to use your <code>username</code> and <code>repository name</code> to replace the <code>{:owner}</code> and <code>{:repository}</code></p>          </div><br>Or, you are allowed to use the following command to show the create time more easily.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s  https://api.github.com/repos/&#123;:user&#125;/&#123;:repo&#125; | grep created_at<br></code></pre></td></tr></table></figure><br> <h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/23611669/how-to-find-the-created-date-of-a-repository-project-on-github">How to find the created date of a repository project on GitHub?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禁用按下 O 或 O 或 回车 后自动注释</title>
    <link href="/posts/4ac5e739/"/>
    <url>/posts/4ac5e739/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>默认情况下在 <code>nvim</code> 中，如果你的光标所在行被注释，然后在普通模式按下 <code>o</code> 或 <code>O</code> ，或在插入模式按下回车就会自动注释下一行。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Before     o  //After</span><br><span class="hljs-comment">// A comment    //A comment</span><br>                <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><br><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>有时候这是相当讨厌的。为了禁止这种情况，可以使用以下的 <code>viml</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vimscript">&quot; Viml<br>set formatoptions-=ro<br></code></pre></td></tr></table></figure><p>或者 <code>Lua</code> 命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.opt.formatoptions:<span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;ro&quot;</span>)<br></code></pre></td></tr></table></figure><br><p>但是当我们在 <code>init.lua</code> 中写入以上代码，重新进入 nvim 时发现并不奏效，于是使用 <code>autocmd</code>，如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.api.nvim_create_autocmd(<br>    &#123;<span class="hljs-string">&quot;FileType&quot;</span>&#125;,<br>    &#123;<br>        command = <span class="hljs-string">&quot;set formatoptions-=ro&quot;</span><br>    &#125;<br>)<br></code></pre></td></tr></table></figure><br>重新进入 nvim，发现代码生效，问题解决。<br><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>以下是群里 Julie 大佬的解释:</p><blockquote><p>因为vim的builtin filetype配置，是在vimrc&#x2F;init.lua之后加载的，覆盖了你写在vimrc&#x2F;init.lua中的formatoptions配置。<br></p><p>用autocmd FileType * set formatptions-&#x3D;t 这样，就可以解决了。<br></p><p>执行 :verb set formatoptions 即可看到最后一次设置这个option的地方。<br><br></p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://stackoverflow.com/questions/4896003/how-to-stop-vim-from-automatically-inserting-the-comment-leader-when-enter-is-pr">how-to-stop-vim-from-automatically-inserting-the-comment-leader-when-enter-is-pr</a></p>]]></content>
    
    
    <categories>
      
      <category>Nvim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hugo 中使用 Mermaid</title>
    <link href="/posts/19c3d0f5/"/>
    <url>/posts/19c3d0f5/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>以下内容仅适用于 <strong>未适配 mermaid</strong> 的主题<br><br>一些主题，如：LoveIt 无需自己额外配置</p>          </div><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>等待一下，看看效果先（rss用户没效果请打开网页）：<br></p><pre><code class=" mermaid">graph LR;A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C&#123;Decision&#125;    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]</code></pre><span id="more"></span><h2 id="在-Hugo-中使用-Mermaid"><a href="#在-Hugo-中使用-Mermaid" class="headerlink" title="在 Hugo 中使用 Mermaid"></a>在 Hugo 中使用 Mermaid</h2><p>在 <strong>站点配置目录</strong> 创建一个 <code>layouts/shortcodes/mermaid.html</code> 文件，写入以下内容：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>&#123;&#123;.Inner&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后再在 <code>layouts/partials/header.html</code> 文件添加以下内容：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; if (.Params.mermaid) &#125;&#125;<br><span class="hljs-comment">&lt;!-- MermaidJS support --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;&#123; end &#125;&#125;<br></code></pre></td></tr></table></figure><p>如果某一篇需要开启 mermaid 可以在 <code>front matter</code> 中加入 <code>mermaid: true</code> 即可<br></p><p>也可以选择在 <code>archetypes/defaults.md</code> 里加入 mermaid: true ，这样每次创建 posts 时都会自动添加<br></p><p>要在文章中使用 mermaid 可以添加以下内容，然后在中间添加 mermaid 语法（详见 <a href="https://mermaid-js.github.io/mermaid/#/">mermaid 官网</a>)<br><br><img src="https://s2.loli.net/2022/04/16/F74vNgoub5nAJ3q.jpg" alt="IMG_20220416_200644.jpg"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.sulvblog.cn/posts/blog/hugo_mermaid">https://www.sulvblog.cn/posts/blog/hugo_mermaid</a></p><p><a href="https://mermaid-js.github.io/mermaid/#/">https://mermaid-js.github.io/mermaid/#/</a></p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Utterances 给 Hugo PaperMod 主题添加评论系统</title>
    <link href="/posts/7bde847e/"/>
    <url>/posts/7bde847e/</url>
    
    <content type="html"><![CDATA[<p>这里以 <code>PaperMod</code> 主题为例，其他主题可能有细微差别，但大同小异。</p><span id="more"></span><h2 id="安装-Utterances"><a href="#安装-Utterances" class="headerlink" title="安装 Utterances"></a>安装 Utterances</h2><p>首先要有一个 <code>GitHub</code> 仓库。如果是用 <code>GitHub Page</code> 托管网站就不需要额外创建，如果没有就自己创建一个，用来存放评论。  </p><p>然后去 <a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> 安装 <code>utterances</code>。选择你要存放留言的仓库（也可以所有仓库，但是不推荐）  </p><p>复制以下代码，<code>repo</code> 要修改成自己的仓库，主题等可见 <a href="https://utteranc.es/">https://utteranc.es/</a>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://utteranc.es/client.js&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">repo</span>=<span class="hljs-string">&quot;[ENTER REPO HERE]&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">issue-term</span>=<span class="hljs-string">&quot;pathname&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;github-light&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">async</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置-Hugo"><a href="#配置-Hugo" class="headerlink" title="配置 Hugo"></a>配置 Hugo</h2><p>在主题配置目录下创建 <code>layouts/partials/comments.html</code> 文件，并添加上述内容</p><p>然后根据 PaperMod 文档，打开 <code>config.yml</code> 文件，添加以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">params:</span><br>  <span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>最后运行 Hugo 重新生成网站即可。打开网站，等 utterances 生效。效果如下👇</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站日志</title>
    <link href="/posts/e62c38c4/"/>
    <url>/posts/e62c38c4/</url>
    
    <content type="html"><![CDATA[<h1 id="记录本站各较重大事件"><a href="#记录本站各较重大事件" class="headerlink" title="记录本站各较重大事件"></a>记录本站各较重大事件</h1><p>2022.2.12：成功建站<br><br>2022.2.13：写下自己第一篇博客以复盘建站过程<br><br>2022.2.14：把Hexo主题由matery转向NexT<br><br>2022.2.15：向百度&amp;bing提交收录申请，然而还搜不到😐<br><br>2022.2.18：主题转为fluid<br><br>2022.2.22：网站可以在bing搜到了<br><br>2022.3.11：操作失误导致文章全部消失😭<br><br>2022.3.12：主题转为butterfly<br><br>2022.4.04：加入Hugo大军 😃<br><br>2022.4.29：使用 <code>LoveIt</code> 主题<br><br>2022-09-10: 中秋佳节，pv突破3k，uv突破1k！🎉<br><br>2022-10-01: back to hexo (lol)<br></p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>About</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>Hey 👋, welcome to my personal website 😃. And I am about to use a <strong>Q&amp;A</strong> format to tell you something <strong>about me</strong> in the following ✨.</p><span id="more"></span><h3 id="Q1-Who-are-you-🤔"><a href="#Q1-Who-are-you-🤔" class="headerlink" title="Q1: Who are you 🤔?"></a><strong>Q1</strong>: Who are you 🤔?</h3><p><strong>A1</strong>: I’m just an <strong>ordinary</strong> senior high school student who likes programming.</p><p>And you can find me in:</p><ul><li>Github:  <a href="https://github.com/XXiaoA/">https://github.com/XXiaoA/</a></li></ul><h3 id="Q2-What-skills-do-you-have-🧐"><a href="#Q2-What-skills-do-you-have-🧐" class="headerlink" title="Q2: What skills do you have 🧐?"></a><strong>Q2</strong>: What skills do you have 🧐?</h3><p><strong>A2</strong>: My first programming language is <code>python</code> 🐍. However, I’m not pretty good at it. And my favorite editor is <strong>NeoVim</strong>. I’m also learning rust and cpp right now.</p><p>Although I’m not proficient in the above skills, I’m going to try my best to learn them well. I’d be honored if you can give me some stars🌟 on the <a href="https://github.com/XXiaoA/">Github</a></p><h3 id="Q3-How-to-contact-you❓"><a href="#Q3-How-to-contact-you❓" class="headerlink" title="Q3: How to contact you❓"></a><strong>Q3</strong>: How to contact you❓</h3><p><strong>A3</strong>: You’re welcome to email me. Here is my email <a href="mailto:isxxiaoa@gmail.com">isxxiaoa@gmail.com</a></p><p>In addition, if you find anything wrong with my website, please send it to me by email or leave a message below 🤗.</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[(function() {  var times = document.getElementsByTagName('time');  if (times.length === 0) { return; }  var posts = document.getElementsByClassName('post-content');  if (posts.length === 0) { return; }  var pubTime = new Date(times[0].dateTime);  /* 文章发布时间戳 */  var now = Date.now()  /* 当前时间戳 */  var interval = parseInt(now - pubTime)  /* 发布时间超过指定时间（毫秒） */  if (interval > 3600*24*30*6*1000 && interval <= 3600*24*30*12*1000){    var days = parseInt(interval / 86400000)    posts[0].innerHTML = '<div class="note note-info" style="font-size:0.9rem"><p>' +      '<div class="h6">Article Timeliness Reminder</div><p>This article has been ' + days + ' days since the first publication, the content of the article may be outdated.' +      '</p></p></div>' + posts[0].innerHTML;  }else if (interval > 3600*24*30*12*1000){    var days = parseInt(interval / 86400000)    posts[0].innerHTML = '<div class="note note-warning" style="font-size:0.9rem"><p>' +      '<div class="h6">Article Timeliness Reminder</div><p>This article has been ' + days + ' days since the first publication, the content of the article may be outdated.' +      '</p></p></div>' + posts[0].innerHTML;  }})();]]></content>
    
  </entry>
  
  
  
</search>
